{
    "summary": "This code initializes a TreeOfThoughts object with specific configuration and uses it to reason about the number 24, generating potential answers and allowing new thoughts to branch off them.",
    "details": [
        {
            "comment": "This code imports the TreeOfThoughts class from \"tree_of_thoughts\" and sets up a config dictionary for tree thinking. The initial section provides prefix and suffix for starting questions, while the reasoning section includes options to evaluate the reasoning given. The vital and fatal sections assess the reasoning after each new thought.",
            "location": "\"/media/root/Prima/works/lmql-tree-of-thoughts/docs/src/examples/get_24.py\":0-21",
            "content": "from tree_of_thoughts import TreeOfThoughts\ntree_config = {\n    \"initial\": { # sandwiches the argument passed to self.reason\n        \"prefix\": \"Question: use 4 numbers and basic arithmetic operations (+-*/) to obtain \",\n        \"suffix\": \". Only choose one number each step.\\nAnswer: Let's think step by step.\",\n    },\n    \"reasoning\": {\n        \"graded\": {\n            \"prefix\": \"Please assess the following reasoning, and choose an option for each point:\\n```\\n\",\n            \"suffix\": \"\\n```\\n\\n\",\n            \"items\": [\n                \"The reasoning is reliable and repeatable: \",\n                \"We are getting closer to the answer: \"\n                \"It's impossible that there is a mistake: \",\n                \"The reasoning is clear and easy to follow: \",\n            ],\n        },\n        # both vital and fatal are applied to the reasoning after each new thought is generated\n        \"vital\": {\n            \"prefix\": \"Please assess the following reasoning, and choose an option for each point:\\n```\\n\",\n            \"suffix\": \"\\n```\\n\","
        },
        {
            "comment": "This code defines a dictionary containing different prompts for user input. The \"items\" key has questions that, if answered \"no\", result in the new leaf's death. The \"fatal\" key asks to assess reasoning and choose options for each point. The \"stopping\" key flags potential answers at the start of each iteration. Lastly, the \"answer\" key provides a callback prompt applied to reasoning leading up to an answer.",
            "location": "\"/media/root/Prima/works/lmql-tree-of-thoughts/docs/src/examples/get_24.py\":22-42",
            "content": "            \"items\": [ # if any of these questions are answered \"no\" the new leaf dies\n                \"There is not a single math mistake in the reasoning: \",\n            ]\n        },\n        \"fatal\": { # if any of these questions are answered \"yes\" the new leaf dies\n            \"prefix\": \"Please assess the following reasoning, and choose an option for each point.\\n```\\n\",\n            \"suffix\": \"\\n```\\n\",\n            \"items\": [\n                \"There is a math mistake in the reasoning: \",\n            ]\n        },\n        \"stopping\": { # Applied at the start of each iteration to flag potential answers\n            \"prefix\": \"Has the following reasoning achieved a correct and satisfying answer to the initial question?\\n```\\n\",\n            \"suffix\": \"\\n```\\n\\nAnswer: \",\n        },\n    },\n    \"answer\": {\n        \"callback_prompt\": { # Applied to the reasoning leading up to an answer\n            \"suffix\": \"In conclusion, using (+,-,x,/) and obey PEDMAS, in one expression it is written as: \",\n        },\n       "
        },
        {
            "comment": "The code is initializing a TreeOfThoughts object with specific configuration, then using it to reason about the number 24. It will generate n_active_leaves=2 possible answers and allow n_branches=3 new thoughts to branch from them if they are not answers. The final answers will be printed.",
            "location": "\"/media/root/Prima/works/lmql-tree-of-thoughts/docs/src/examples/get_24.py\":42-62",
            "content": " \"callback_fn\": lambda x: x.replace(\".\", \"\").strip(), # Applied to the result of whatever follows from the callback prompt\n        \"validation\" : { # validations can be a yes no question and expected answer, or any bool returning function\n            \"prefix\": \"Please answer the following questions about the expression `\",\n            \"suffix\": \"`. \",\n            \"items\": [ # TODO: allow argument usage in all prompts and not just validation\n                (\"Are four numbers used to obtain $arg?\", True), # $arg substitutes the reasoning argument into the validation prompt\n                (\"Does the expression really equal $arg?\",  True)\n            ]\n        },\n    },\n}\nnumber_maker = TreeOfThoughts(**tree_config)\n# The top n_active_leafs scoring leafs are selected on each iteration\n# n_branches new thoughts breanch from them if they are not answers\nanswers = number_maker.reason(\"24\", n_active_leaves=2, n_branches=3, verbose=True)\nprint()\nprint(\"FINAL ANSWERS\")\nprint(answers)"
        }
    ]
}